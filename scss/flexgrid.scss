// flexgrid 3.2.1 - https://github.com/corysimmons/flexgrid


$gutter: 30px !default;


/// Controls most aspects of the grid system. Apply this to the outermost container in a Container > Container > Items scheme. It will go through and apply the appropriate styles to each container and the items. It's suggested you use the named params since there are a few params to this one.
///
/// @param {fraction} $ratio [1] - A fraction of the container for the element to span.
/// @param {string} $dir [row] - Which direction the layout will go. Accepts row (horizontal) or column (vertical).
/// @param {string} $flex [false] - Decides if the items should stretch to fill the container or remain traditional grid items. Accepts false, flex (for a generally fixed width where remaining elements will stretch), or masonry (where elements lay together like bricks).
/// @param {boolean} $scroll [false] - Creates a scrollbar for the outer container element. Useful if you have two outer container elements lined up and one of them produces a scrollbar while the other one does not. This will give them both scrollbars and help line your grid back up.
/// @param {number} $gut [$gutter] - Sets a custom gutter width for this grid. Accepts any CSS unit.
///
/// @example
///   .container {
///     @include box($ratio: 1/3, $dir: row, $flex: masonry, $scroll: false, $gut: 60px);
///   }

@mixin box($ratio: 1, $dir: row, $flex: false, $scroll: false, $gut: $gutter) {
  @if ($dir == row) {
    overflow-x: hidden;
    @if ($scroll) {
      overflow-y: scroll;
    }
  } @else {
    overflow-y: hidden;
    @if ($scroll) {
      overflow-x: scroll;
    }
  }
  > * {
    display: flex;
    flex-wrap: wrap;
    flex-direction: $dir;
    > * {
      @if ($gut == 0) {
        flex-basis: calc(100% * #{$ratio});
      } @else {
        flex-basis: calc(100% * #{$ratio} - #{$gut});
      }
      @if ($flex == flex) {
        flex-grow: 1;
      }
      @if ($flex == masonry) {
        flex-grow: 1;
        flex-basis: auto;
      }
    }
    @if ($dir == row) {
      height: 100%;
      @if ($gut != 0) {
        margin-left: -($gut / 2);
        margin-right: -($gut / 2);
      }
      > * {
        margin-left: ($gut / 2);
        margin-right: ($gut / 2);
      }
    } @else {
      @if ($gut == 0) {
        height: 100%
      } @else {
        height: calc(100% + #{$gut});
      }
      @if ($gut != 0) {
        margin-top: -($gut / 2);
        margin-bottom: -($gut / 2);
      }
      > * {
        margin-top: ($gut / 2);
        margin-bottom: ($gut / 2);
      }
    }
  }
}


/// Creates a horizontal offset between columns. Unfortunately it's not possible to create a vertical offset between columns because CSS percentages are relative to the width of a containing element.
///
/// @param {fraction} $ratio [1] - A fraction of the container for the element to set a margin of. Can be positive or negative.
/// @param {number} $gut [$gutter] - Sets a custom gutter width for this offset. It should match the grid in question's gutter. Accepts any CSS unit.
///
/// @example
///   .container {
///     @include box(1/3);
///     > .inner {
///       > .item {
///         @include offset($ratio: 1/3, $gut: 60px);
///       }
///     }
///   }

@mixin offset($ratio: 1, $gut: $gutter) {
  @if ($gut > 0) {
    @if ($ratio > 0) {
      margin-right: calc(100% * #{$ratio} + (#{$gut} / 2));
    } @else {
      margin-left: calc(-100% * #{$ratio} + (#{$gut} / 2));
    }
  } @else {
    @if ($ratio > 0) {
      margin-right: calc(100% * #{$ratio});
    } @else {
      margin-left: calc(100% * #{$ratio});
    }
  }
}


/// Sets a translucent background color to all elements it affects. Helpful while setting up, or debugging, the structure of your site to make sure all items are cleared correctly.
///
/// @param {color} $bg [blue] - A color to be lightened, so make sure you pick a darkish color.
///
/// @example
///   section {
///     @include edit(red);
///   }

@mixin edit($bg: blue) {
  * {
    background: rgba($bg, 0.1);
  }
}


html, body {
  height: 100%;
}
