// flexgrid 5.0.0 - https://github.com/corysimmons/flexgrid


$gutter = 30px


/**
 * Sets properties on a container necessary for flexed items to go inside. Think of this like your row in a row > column grid system, except it can work vertically as well as horizontally.
 *
 * @param {string} [$dir=row] - Which direction the layout will go. Accepts row (horizontal) or column (vertical).
 * @param {number} [$gut=$gutter] - Sets a custom gutter width for this grid. This should probably match the block()'s $gut value.
 *
 * @example
 *   .container
 *     box()
 *     @media (max-width: 800px)
 *       box(column)
 */

box($ratios = 1, $dir = row, $gut = $gutter)
  display: flex
  flex-direction: $dir
  if $dir is row
    flex-wrap: wrap
    $gut = $gut * .1
    margin: auto -(_get-column($ratios, $gut)[1])%
    height: auto
    if $gut is not 0
      width: s('calc(100% + %s)', (_get-column($ratios, $gut)[1] * 2)%)
    else
      width: 100%
  else if $dir is column
    flex-wrap: inherit
    if $gut is not 0
      $gut = $gut * .1
      width: s('calc(100% + %s)', (_get-column($ratios, $gut)[1] * 2)%)
      height: s('calc(100vh + %s)', (_get-column($ratios, $gut)[1] * 2)vh)
      margin: (-($gut / 2)vh) (-(_get-column($ratios, $gut)[1])%)
    else
      height: 100%
  else
    overflow-y: hidden
    if $gut is not 0
      $gut = $gut * .1
      width: s('calc(100% + %s)', (_get-column($ratios, $gut)[1] * 2)%)
      height: s('calc(100vh + %s)', (_get-column($ratios, $gut)[1] * 2)vh)
      margin: (-($gut / 2)vh) (-(_get-column($ratios, $gut)[1])%)
    else
      width: 100%
      height: 100%


/**
 * Specifies the sizing and spacing of the element it's applied to. The column in a row > column grid system except it can go vertical as well as horizontal.
 *
 * @param {fraction} [$ratios=1] - A fraction of the container for the element to span.
 * @param {string} [$dir=row] - Which direction the layout will go. Accepts row (horizontal) or column (vertical).
 * @param {number} [$gut=$gutter] - Sets a custom gutter width for this element. Accepts any CSS unit and should probably match the box()'s $gut value.
 *
 * @example
 *   section
 *     box($gut: 60px)
 *     .element
 *       block(1/3, 60px)
 */

block($ratios = 1, $dir = row, $gut = $gutter, $output = normal)
  if $dir is row
    if $gut > 0
      $gut = $gut * .1
      if $output is normal or $output is bare
        flex-basis: (_get-column($ratios, $gut)[0])%
      if $output is normal or $output is init
        height: auto
        margin: auto (_get-column($ratios, $gut)[1])%
    if $gut is 0
      if $output is normal or $output is bare
        flex-basis: (100% * $ratios[0])%
  else if $dir is column
    if $gut > 0
      $gut = $gut * .1
      width: s('calc(100% - %s)', (_get-column($ratios, $gut)[1] * 2)%)
      if $output is normal or $output is bare
        height: (_get-column($ratios, $gut)[0])vh
      if $output is normal or $output is init
        margin: (($gut / 2)vh) (_get-column($ratios, $gut)[1])%
    if $gut is 0
      if $output is normal or $output is bare
        height: (100% * $ratios[0])%
  else
    if $gut > 0
      $gut = $gut * .1
      if $output is normal or $output is bare
        flex-basis: (_get-column($ratios, $gut)[0])%
        height: (_get-column($ratios, $gut)[0])vh
      if $output is normal or $output is init
        margin: (($gut / 2)vh) (_get-column($ratios, $gut)[1])%
    if $gut is 0
      if $output is normal or $output is bare
        width: (100% * $ratios[0])
        height: (100% * $ratios[0])


/**
 * Stretches elements to take up flexed space or sets elements to perform Flexbox CSS masonry.
 *
 * @param {string} [$layout=grow] - Sets what type of layout Flexbox will create. This can be grow or masonry. grow will fill remaining space. Masonry will create CSS masonry.
 *
 * @example
 *   section
 *     box()
 *     padding: 15px 30px
 *     > img
 *       block(1/3)
 *       stretch(masonry)
 *       margin-top: 15px
 *       margin-bottom: 15px
 */

stretch($layout = grow)
  if $layout is masonry
    flex: 1 0 auto
  else
    flex-grow: 1


/**
 * Margin to the left or right of an elements depending on if the fraction passed is positive or negative.
 *
 * @param {fraction} [$ratios=false] - Fraction of the container to be offset.
 * @param {number} [$gut=$gutter] - How large the gutter involved is, typically this won't be adjusted, but if you have set the columns for that row to have different gutters than default, you will need to match that gutter here as well.
 *
 * @example
 *   .two-elements
 *     block(1/3)
 *     &:first-child
 *       offset(1/3)
 */

offset($ratios = false, $gut = $gutter)
  if $old
    $gut = $gut * .1
    if $gut > 0
      if $ratios > 0
        margin-left: ((_get-column($ratios, $gut)[0]) + ((_get-column($ratios, $gut)[1]) * 3))%
      if $ratios < 0
        margin-right: (-1 * ((_get-column($ratios, $gut)[0]) + (_get-column($ratios, $gut)[1])))%
    if $gut is 0
      if $ratios > 0
        margin-left: (100% * $ratios)
      if $ratios < 0
        margin-right: (-100% * $ratios)


/**
 * Sets a translucent background color to all elements it affects. Helpful while setting up, or debugging, the structure of your site to make sure all items are cleared correctly.
 *
 * @param {color} [$bg=blue] - A color to be lightened, so make sure you pick a darkish color.
 *
 * @example
 *   section
 *     edit(red)
 */

edit($bg = blue)
  *
    background: rgba($bg, 10%)


/**
 * Vertically and/or horizontally align nested elements.
 *
 * @param {string} [$dir=both] - Both, vertical, v, horizontal, or h.
 *
 * @example
 *   .parent
 *     align(vertical)
 *     width: 600px
 *     height: 400px
 *     .child
 *       width: 300px
 *       height: 150px
 */

align($dir = both)
  display: flex
  if ($dir == horizontal) or ($dir == h)
    justify-content: center
  else if ($dir == vertical) or ($dir == v)
    align-items: center
  else if ($dir == reset)
    justify-content: inherit
    align-items: inherit
  else
    justify-content: center
    align-items: center


/**
 * Reverses a list of numbers (or in our case, fractions)
 *
 * @param {fractions} $list - A list of numbers or fractions to be reversed.
 *
 * @example
 *   $foo: 1/2 1/3 1/4
 *   _reverse($foo)
 *
 * @return {fractions}
 *
 * @access private
 */

_reverse($list)
  result = ()
  for item in $list
    prepend(result, item)
  return result


/**
 * Gets a column's width and gutter size as an integer.
 *
 * @param {fraction} [$ratios=1] - A list of fractions to be used in calculating the appropriate width and gutter size returned.
 * @param {number} [$gut=$gutter] - The gutter size used to generate an appropriate width and gutter size to be returned by the function.
 *
 * @example
 *   .third
 *     width: (_get-column(1/3, '30px')[0])%
 *
 * @return {fraction | number}
 *
 * @access private
 */

_get-column($ratios = 1, $gut = $gutter)
  $ratios = _reverse($ratios)
  $width = 100
  for $ratio in $ratios
    $gut = $gut / $width * 100
    $width = 100 * $ratio - $gut
  return $width ($gut / 2)


html
  overflow-y: auto

html, body
  height: 100%
