// flexgrid 3.2.2 - https://github.com/corysimmons/flexgrid


$gutter = 30px


/**
 * Controls most aspects of the grid system. Apply this to the outermost container in a Container > Container > Items scheme. It will go through and apply the appropriate styles to each container and the items. It's suggested you use the named params since there are a few params to this one.
 *
 * @param {fraction} [$ratio=1] - A fraction of the container for the element to span.
 * @param {string} [$dir=row] - Which direction the layout will go. Accepts row (horizontal) or column (vertical).
 * @param {string} [$flex=false] - Decides if the items should stretch to fill the container or remain traditional grid items. Accepts false, flex (for a generally fixed width where remaining elements will stretch), or masonry (where elements lay together like bricks).
 * @param {boolean} [$scroll=false] - Creates a scrollbar for the outer container element. Useful if you have two outer container elements lined up and one of them produces a scrollbar while the other one does not. This will give them both scrollbars and help line your grid back up.
 * @param {number} [$gut=$gutter] - Sets a custom gutter width for this grid. Accepts any CSS unit.
 *
 * @example
 *   .container
 *     box($ratio: 1/3, $dir: row, $flex: masonry, $scroll: false, $gut: 60px)
 */

box($ratio = 1, $dir = row, $flex = false, $scroll = false, $gut = $gutter)
  if $dir is row
    overflow-x: hidden
    if $scroll
      overflow-y: scroll
  else
    overflow-y: hidden
    if $scroll
      overflow-x: scroll
  > *
    display: flex
    flex-wrap: wrap
    flex-direction: $dir
    > *
      if $gut is 0
        flex-basis: s('calc(100% * %s)', $ratio)
      else
        flex-basis: s('calc(100% * %s - %s)', $ratio, $gut)
      if $flex is flex
        flex-grow: 1
      if $flex is masonry
        flex-grow: 1
        flex-basis: auto
    if $dir is row
      height: 100%
      if $gut is not 0
        margin-left: -($gut / 2)
        margin-right: -($gut / 2)
      > *
        margin-left: ($gut / 2)
        margin-right: ($gut / 2)
    else
      if $gut is 0
        height: 100%
      else
        height: s('calc(100% + %s)', $gut)
      if $gut is not 0
        margin-top: -($gut / 2)
        margin-bottom: -($gut / 2)
      > *
        margin-top: ($gut / 2)
        margin-bottom: ($gut / 2)


/**
 * Creates a horizontal offset between columns. Unfortunately it's not possible to create a vertical offset between columns because CSS percentages are relative to the width of a containing element.
 *
 * @param {fraction} [$ratio=1] - A fraction of the container for the element to set a margin of. Can be positive or negative.
 * @param {number} [$gut=$gutter] - Sets a custom gutter width for this offset. It should match the grid in question's gutter. Accepts any CSS unit.
 *
 * @example
 *   .container
 *     box(1/3)
 *     > .inner
 *       > .item
 *         offset($ratio: 1/3, $gut: 60px)
 */

offset($ratio = 1, $gut = $gutter)
  if $ratio is 0
    margin-left: ($gut / 2)
    margin-right: ($gut / 2)
  if $gut > 0
    if $ratio > 0
      margin-right: s('calc(100% * %s + (%s / 2))', $ratio, $gut)
    else
      margin-left: s('calc(-100% * %s + (%s / 2))', $ratio, $gut)
  else
    if $ratio > 0
      margin-right: s('calc(100% * %s)', $ratio)
    else
      margin-left: s('calc(100% * %s)', $ratio)


/**
 * Sets a translucent background color to all elements it affects. Helpful while setting up, or debugging, the structure of your site to make sure all items are cleared correctly.
 *
 * @param {color} [$bg=blue] - A color to be lightened, so make sure you pick a darkish color.
 *
 * @example
 *   section
 *     edit(red)
 */

edit($bg = blue)
  *
    background: rgba($bg, 10%)


html, body
  height: 100%
